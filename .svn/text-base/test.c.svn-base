#include "USMV.h"
#include "USMM.h"
#include "uscr/USCR_BEGIN.h"
#include "uscr/USCR_END.h"
#include "uscr/USCR_INSERT_ENTRY.h"
#include "uscr/USCR_INSERT_BLOCK.h"
#include "uscr/USDS.h"
#include "comm_tools.h"
#include "uscr/uscr_coo.h"
#include "uscr/uscr_csr.h"
#include "uscr/uscr_bsc.h"
#include "uscr/uscr_bsr.h"
#include "uscr/uscr_bco.h"
#include "uscr/uscr_dia.h"
#include "uscr/uscr_bdi.h"
#include "uscr/uscr_vbr.h"
#include "mbv/mbv.h"
#include "blas_enum.h"
#include "conv/usconv.h"
//#include "link.h"
int main()
{
  const int N=4;
  const int nz=6;
  double val[]={1.1,2.2,2.4,3.3,4.1,4.4};
  int indx[]={0,1,1,2,3,3};
  int jndx[]={0,1,3,2,0,3};
  double x[]={1.0,1.0,1.0,1.0};
  double y[]={0.0,0.0,0.0,0.0};
  int k[4]={2,3,4,5};
  int l[3]={2,2,2};


  //for test(case) 3 lmbv_bsc
  double v3[8]={3,1,5,0,4,0,0,1};
  int bindx3[2]={0,2};
  int pb3[2]={0,1};
  int pe3[2]={1,2};
  double x3[6]={1,1,1,1,1,1};
  double y3[4];


  //for test4 rmbv_bsc
  double v4[8]={3,1,5,0,4,0,0,1};
  int bindx4[2]={0,2};
  int pb4[2]={0,1};
  int pe4[2]={1,2};
  double x4[4]={1,-1,1,-1};
  double y4[6];


  //for test5 rmbv_bsr
  double v5[8]={3,1,5,0,4,0,0,1};
  int bindx5[2]={0,1};
  int pb5[3]={0,1,1};
  int pe5[3]={1,1,2};
  double x5[4]={1,-1,1,-1};
  double y5[6];


  //for test6 lmbv_bsr
  double v6[8]={3,1,5,0,4,0,0,1};
  int bindx6[2]={0,1};
  int pb6[3]={0,1,1};
  int pe6[3]={1,1,2};
  double x6[6]={1,1,1,1,1,1};
  double y6[4];



  //for test7 lmbv_bco and rmbv_bco
  double v7[8]={3,1,5,0,4,0,0,1};
  int bindx7[2]={0,2};
  int bjndx7[2]={0,1};
  double x7[6]={1,1,1,1,1,1};
  double y7[4];
  double xx7[4]={1,-1,1,-1};
  double yy7[6];

  //for test8 lmbv_dia and rmbv_dia
  double v8[16]={0,0,4,1, 5,0,0,0, 3,0,0,0, 1,0,0,0};
  int idiag8[4]={-2,-1,0,1};
  double x8[6]={1,1,1,1,1,1};
  double y8[4];
  double xx8[4]={1,-1,1,-1};
  double yy8[6];





  //for test9 lmbv_bdi and rmbv_bdi
  double v9[16]={3,1,5,0,0,0,0,0,0,0,0,0,4,0,0,1};

  int ibdiag9[2]={0,-1};

  double x9[6]={1,1,1,1,1,1};
  double y9[4];
  double xx9[4]={1,-1,1,-1};
  double yy9[6];
  //for test10 mbv_vbr
  double v10[21]={3,1,0, 5,0,0,0,0,0, 0,0,0,0,0,4,0,0,0, 0,0,1};
  int IA1_10[4]={0,0,0,1};
  int IA2_10[5]={0,3,9,18,21};

  int bp1_10[4]={0,1,3,6};
  int bp2_10[3]={0,3,4};

  int PB_10[3]={0,1,2};
  int PE_10[3]={1,2,4};

  double x10[6]={1,1,1,1,1,1};
  double y10[4];
  double xx10[4][1]={1,-1,1,-1};
  double yy10[6][1];


  //for test11 coo
  double v11[5]={3,1,5,4,1};
  int IA1_11[5]={0,0,1,4,5};
  int IA2_11[5]={0,1,0,2,3};
  double x11[6]={1,1,1,1,1,1};
  double y11[4];
  double xx11[4]={1,-1,1,-1};
  double yy11[6];



  //  double xx10[4][1]={1,-1,1,-1};
  //  double yy10[6][1];

  d_matrix* A;
  dsp_linknode* dsp_A;
  int i;
  double alpha=1.0;
  int result=0;

  int test=11;

  switch(test)
    {
    case 0://第一个测试程序
      /*----------------------------------*/
      /* Step 1: Creat Sparse BLAS Handle */
      /*----------------------------------*/

      A=BLAS_duscr_begin (N,N); //assigned format default value: 'n' (normal)

      /*-------------------------*/
      /* Step 2: insert entries  */
      /*------------------------*/

      for(i=0;i<nz;i++)
        BLAS_duscr_insert_entry(A,val[i],indx[i],jndx[i]);

      /*-------------------------------------------------*/
      /* Step 3: Complete construction of sparse matrix  */
      /*-------------------------------------------------*/
      dump_matrix (A);
      dsp_A=BLAS_uscr_end (A);//set FIDA defalut value: 'COO'

      /*-------------------------------------------------*/
      /* Step 4: Compute Matrix vector product y=A*x     */
      /*-------------------------------------------------*/

      BLAS_dusmv (ORIGIN_MATRIX,alpha,dsp_A,x,1,y,1);

      /*---------------------------------*/
      /* Step 5: Release Matrix Handle   */
      /*---------------------------------*/

      result=BLAS_usds (dsp_A,3);
      break;
    case 1:
      A=BLAS_duscr_variable_block_begin (4,3,k,l);
      dump_matrix (A);

      for(i=0;i<nz;i++)
        BLAS_duscr_insert_entry (A,val[i],indx[i],jndx[i]);


      dsp_A=BLAS_uscr_end(A);
      break;

    case 3://lmbv_bsc part
      dsp_A=duscr_bsc (6,4,v3,8,bindx3,2,pb3,2,pe3,2,3,2,2,1088,&result);
      dlmbv_bsc (dsp_A,x3,6,y3,4,&result);

      for(i=0;i<4;i++)
        printf("%f\n",y3[i]);

      printf("the result is  %d\n",result);

      break;
    case 4://rmbv_bsc part
      result=1;
      //dsp_A=duscr_bco (6,4,v7,8,bindx7,2,bjndx7,2,2,3,2,2,1088,&result);

      dsp_A=duscr_bsc (6,4,v4,8,bindx4,2,pb4,2,pe4,2,3,2,2,1088,&result);
      usconv_bsc2bco(dsp_A,&result);
      usconv_bco2bsc(dsp_A,&result);
      drmbv_bsc(dsp_A,x4,4,y4,6,&result);

      for(i=0;i<6;i++)
        printf("%f\n",y4[i]);

      printf("the rmbv_bsc result is  %d\n",result);

      break;
    case 5://rmbv_bsr part
      result=1;
      // dsp_A=duscr_bco (6,4,v7,8,bindx7,2,bjndx7,2,2,3,2,2,1088,&result);

      dsp_A=duscr_bsr (6,4,v5,8,bindx5,2,pb5,3,pe5,3,3,2,2,1088,&result);

      usconv_bsr2bco(dsp_A,&result);
      dsp_A->number=1;
      printf("res is %d \n",dsp_A->number);
      usconv_bco2bsr(dsp_A,&result);

      drmbv_bsr(dsp_A,x5,4,y5,6,&result);
      for(i=0;i<6;i++)
        printf("%f\n",y5[i]);

      printf("the result 5 is  %d\n",result);
      break;
    case 6://lmbv_bsr part
      dsp_A=duscr_bsr (6,4,v6,8,bindx6,2,pb6,3,pe6,3,3,2,2,1088,&result);
      dlmbv_bsr(dsp_A,x6,6,y6,4,&result);

      for(i=0;i<4;i++)
        printf("%f\n",y6[i]);
      printf("the result is  %d\n",result);
      break;
    case 7://lmbv_bco  and rmbv_bco part
      result=1;
      dsp_A=duscr_bco (6,4,v7,8,bindx7,2,bjndx7,2,2,3,2,2,1088,&result);

      dlmbv_bco(dsp_A,x7,6,y7,4,&result);
      for(i=0;i<4;i++)
        printf("%f\n",y7[i]);
      printf("the result is  %d\n",result);

      drmbv_bco(dsp_A,xx7,4,yy7,6,&result);
      for(i=0;i<6;i++)
        printf("%f\n",yy7[i]);
      printf("the result is  %d\n",result);
      break;
    case 8://lmbv_dia and rmbv_dia part
      dsp_A=duscr_dia (6,4,v8,16,4,idiag8,4,4,1088,&result);

      dlmbv_dia(dsp_A,x8,6,y8,4,&result);
      for(i=0;i<4;i++)
        printf("%f\n",y8[i]);
      printf("the result is  %d\n",result);

      drmbv_dia(dsp_A,xx8,4,yy8,6,&result);
      for(i=0;i<6;i++)
        printf("%f\n",yy8[i]);
      printf("the result is  %d\n",result);
      break;


    case 9://lmbv_bdi and rmbv_bdi part


      result=1;
      // dsp_A=duscr_bco (6,4,v7,8,bindx7,2,bjndx7,2,2,3,2,2,1088,&result);


      dsp_A=duscr_bdi (6,4,v9,16,2,ibdiag9,2,2,2,2,2,1088,&result);
      usconv_bdi2bco(dsp_A,&result);
      usconv_bco2bdi(dsp_A,&result);
      dlmbv_bdi(dsp_A,x9,6,y9,4,&result);
      for(i=0;i<4;i++)
        printf("%f\n",y9[i]);
      printf("the result is  %d\n",result);

      drmbv_bdi(dsp_A,xx9,4,yy9,6,&result);
      for(i=0;i<6;i++)
        printf("%f\n",yy9[i]);
      printf("the result is  %d\n",result);
      break;

    case 10://lmbv_vbr and rmbv_vbr part
      dsp_A=duscr_vbr (6,4,v10,21,IA2_10,5,IA1_10,4,bp1_10,4,bp2_10,3,PB_10,3,PE_10,3,3,2,1088,&result);



      dlmbv_vbr(dsp_A,x10,6,y10,4,&result);
      for(i=0;i<4;i++)
        printf("%f\n",y10[i]);
      printf("the result is~  %d\n",result);

      //      drmbv_vbr(dsp_A,xx10,4,yy10,6,&result);
      //      for(i=0;i<6;i++)
      //        printf("%f\n",yy10[i]);
      //      printf("the result is~  %d\n",result);
      for(i=0;i<6;i++)
        yy10[i][0]=0;
      //result=BLAS_dusmv(ORIGIN_MATRIX,1,dsp_A,xx10,4,yy10,6);
      result=BLAS_dusmm (1,ORIGIN_MATRIX,1,1,dsp_A,xx10,4,yy10,6);
      for(i=0;i<6;i++)
        printf(": %f\n",yy10[i][0]);
      printf("the result is  %d\n",result);
      break;




    case 11://coo
      result=1;
      dsp_A=duscr_coo (6,4,v11,5,IA1_11,IA2_11,5,1088,&result);
      //usconv_coo2csc (dsp_A,&result);
      //  dlmbv_csc (dsp_A,x11,6,y11,4,&result);
      // dlmbv_coo(dsp_A,x11,6,y11,4,&result);



      usconv_coo2dia (dsp_A,&result);
      usconv_dia2coo (dsp_A,&result);
      usconv_coo2csc (dsp_A,&result);
      usconv_csc2coo (dsp_A,&result);
      usconv_coo2csr (dsp_A,&result);
      usconv_csr2coo (dsp_A,&result);
      dlmbv_coo(dsp_A,x11,6,y11,4,&result);
      for(i=0;i<4;i++)
        printf("%f\n",y11[i]);
      printf("the result 11 is~  %d\n",result);
      //      drmbv_coo (dsp_A,xx11,4,yy11,6,&result);
      //      for(i=0;i<6;i++)
      //        printf(": %f\n",yy11[i]);
      //      printf("the result is  %d\n",result);
      break;
    default:
      break;
    }


  printf("hello %d\n",result);
  return 0;
}
