#include "uscr/uscr_bco.h"
dsp_linknode* duscr_bco(int m,int n,double* val,int n_val,int* bindx,int n_bindx,int* bjndx,int n_bjndx,int bnnz,int mb,int kb,int lb,int prpty,int* istat)
{
  int  options,base;
  bool  COPY;
  char  message;
  DSPMAT* dsp_data;
  dsp_linknode* dsp_l;
  int i;
  options=*istat;
  *istat=-1; //if not changed later,routine has failed
  dsp_l=new_dsp(istat);

  dsp_data=accessdata_dsp(dsp_l,istat);

  if(dsp_data==NULL) {//then
      *istat=blas_error_param;
      return;
    }//end if

  dsp_data->FIDA=BCO_FORMAT;
  dsp_data->M=m;
  dsp_data->K=n;
  set_descra(dsp_data->DESCRA,prpty,istat);
  get_descra(dsp_data->DESCRA,'b',&message,istat);
  if(*istat!=0) {//then
      *istat=blas_error_param;
      return;
    }//end if
  if(message=='C') {//then
      base=C_BASE;
    }else{ //Assuming F base
      base=F_BASE;
    }//end if
  set_infoa(dsp_data->INFOA,'b',base,istat);
  set_infoa(dsp_data->INFOA,'n',bnnz,istat);
  set_infoa(dsp_data->INFOA,'d',lb,istat); //row-dim of a block
  set_infoa(dsp_data->INFOA,'e',lb,istat); //col-dim of a block
  set_infoa(dsp_data->INFOA,'f',mb,istat); //row-dim in blocks
  set_infoa(dsp_data->INFOA,'g',kb,istat); //col-dim in blocks
  if((bnnz!=n_bindx)||(bnnz!=n_bjndx)||(m!=mb*lb)||(n!=kb*lb)||(bnnz*lb*lb!=n_val)||(minval(bindx,n_bindx)<base)||(maxval(bindx,n_bindx)>mb-1+base)||(minval(bjndx,n_bindx)<base)||(maxval(bjndx,n_bjndx)>kb-1+base)) {//then
      BLAS_usds(dsp_l,3);
      *istat=blas_error_param;
      return NULL;
    }//end if
  if(options>0) {//then
      // decision rule whether or not to copy
      COPY=TRUE;
      if(COPY) {//then
          options=-1; //copy
        }else{
          options=0;  //reference
        }//end if
    }//end if

dsp_data->n_A=n_val;
dsp_data->n_IA1=n_bindx;
dsp_data->n_IA2=n_bjndx;
dsp_data->n_BP1=0;
dsp_data->n_BP2=0;
dsp_data->n_PB=0;
dsp_data->n_PE=0;


  if(options==0) {//then
      set_infoa(dsp_data->INFOA,'c',REF_OF_SOURCE,istat);
      if(*istat!=0) {//then
          *istat=blas_error_param;
          return;
        }//end if
      // create reference to original matrix
      dsp_data->A=val;
      dsp_data->IA1=bindx;
      dsp_data->IA2=bjndx;
      *istat=0;
    }else{
      // The additional required memory is DEALLOCATED later in USDS//
      set_infoa(dsp_data->INFOA,'c',COP_OF_SOURCE,istat);
      if(*istat!=0) {//then
          *istat=blas_error_param;
          return NULL;
        }//end if
      // copy original data
      dsp_data->A=malloc (sizeof(*dsp_data->A)*n_val);
      dsp_data->IA1=malloc (sizeof(*dsp_data->IA1)*n_bindx);
      dsp_data->IA2=malloc (sizeof(*dsp_data->IA2)*n_bjndx);
      for(i=0;i<n_val;i++)
        dsp_data->A[i]=val[i];
      for(i=0;i<n_bindx;i++)
        dsp_data->IA1[i]=bindx[i];
      for(i=0;i<n_bjndx;i++)
        dsp_data->IA2[i]=bjndx[i];

      *istat=1;
    }//end if
  if(*istat>=0)
    {
      *istat=0;
      return dsp_l;
    }
  else
    return NULL;
}//end subroutine duscr_bco
