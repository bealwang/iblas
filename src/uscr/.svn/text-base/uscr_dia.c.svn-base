#include "uscr/uscr_dia.h"
#include "types.h"
#include "comm_tools.h"
#include "properties.h"
#include "uscr/USDS.h"
#include <string.h>
dsp_linknode* duscr_dia (int m,int n,double* val,int n_val,int lda,int* idiag,int n_idiag,int ndiag,int prpty,int* istat)
{
  int nnz,options,base;
  bool COPY;
  char message;
  DSPMAT* dsp_data;
  dsp_linknode* dsp_l;
  options = *istat;
  *istat = -1; //if not changed later, routine has failed


  if((ndiag!=n_idiag)||(lda*ndiag!=n_val)||(maxval(idiag,n_idiag)>n)||(minval(idiag,n_idiag)<-m)||(lda!=(m<n?m:n))) {//then
      *istat=blas_error_param;
      return NULL;
    }//end if
  dsp_l=new_dsp (istat);
  if (*istat!=0) {//then
      *istat=blas_error_memalloc;
      return NULL;
    }//end if
  dsp_data=accessdata_dsp(dsp_l,istat);
  if (*istat!=0) {//then
      *istat=blas_error_param;
      return NULL;
    }//end if
  dsp_data->FIDA =DIA_FORMAT;
  dsp_data->M = m;
  dsp_data->K = n;
  set_descra(dsp_data->DESCRA,prpty,istat);
  get_descra(dsp_data->DESCRA,'b',&message,istat);
  if (*istat!=0) {//then
      *istat=blas_error_param;
      return NULL;
    }//end if
  if (message=='C') {//then
      base = C_BASE;
    }else{ //Assuming F base
      base = F_BASE;
    }//end if
  set_infoa(dsp_data->INFOA,'b',base,istat);
  if (*istat!=0) {//then
      *istat=blas_error_param;
      return NULL;
    }//end if
  nnz=n_val-count(val,n_val,0);
  if(nnz<=lda*ndiag*0.5) {//then
      printf("too many zeros stored in dia format. by function uscr_dia\n");
      // Warning Many zeros stored
    }//end if
  set_infoa(dsp_data->INFOA,'n',nnz,istat);
  set_infoa(dsp_data->INFOA,'d',lda,istat); //row-dim of val
  set_infoa(dsp_data->INFOA,'e',ndiag,istat); //col-dim of val
  if (options>0) {//then
      // decision rule whether or not to copy
      COPY =TRUE;
      if(COPY) {//then
          options = -1; //copy
        }else{
          options = 0 ; //reference
        }//end if
    }//end if
  dsp_data->n_A=n_val;
  dsp_data->n_IA1=n_idiag;
  dsp_data->n_BP1=0;
  dsp_data->n_BP2=0;
  dsp_data->n_IA2=0;
  dsp_data->n_PB=0;
  dsp_data->n_PE=0;

  if (options==0) {//then
      set_infoa(dsp_data->INFOA,'c',REF_OF_SOURCE,istat);

      if (*istat!=0) {//then
          *istat=blas_error_param;
          return NULL;
        }//end if
      // create reference to original matrix

      dsp_data->A=val;
      dsp_data->IA1=idiag;
      *istat=0;
    }else{
      // The additional required memory is DEALLOCATED later in USDS//
      set_infoa(dsp_data->INFOA,'c',COP_OF_SOURCE,istat);
      if (*istat!=0) {//then
          *istat=blas_error_param;
          return NULL;
        }//end if
      // copy original data
      dsp_data->A=malloc (sizeof(double)*n_val);
      dsp_data->IA1=malloc (sizeof(double)*n_idiag);

      if(!dsp_data->A&&!dsp_data->IA1) {//then
          *istat=blas_error_memalloc;
          return NULL;
        }//end if
      memcpy (dsp_data->A,val,sizeof(double)*n_val);
      memcpy(dsp_data->IA1,idiag,sizeof(double)*n_idiag);
      *istat=1;
    }//end if
  if(istat>=0)
    {
      *istat=0;
      return dsp_l;
    }
  else return NULL;
}
